pipeline {
  agent any

  tools {
    maven 'Maven3'
    jdk 'JDK17'
  }

  environment {
    SONAR_TOKEN = credentials('jenkins-sonar')
    SONAR_HOST = 'http://192.168.33.10:9000'
    DOCKERHUB_CREDENTIALS = credentials('Dockerhub-access')
    DOCKER_IMAGE = 'samiraderouich/tp-projet'
    DOCKER_TAG = "${env.BUILD_ID}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/samderouich2000/Backend-CI-CD.git'
      }
    }

    stage('Clean') {
      steps {
        sh 'mvn -B clean'
      }
    }

    stage('Compile') {
      steps {
        sh 'mvn -B -DskipTests=true compile'
      }
    }

    stage('Analyse SonarQube') {
      steps {
        withSonarQubeEnv('sq1') {
          sh "mvn -B sonar:sonar -Dsonar.host.url=${SONAR_HOST} -Dsonar.login=${SONAR_TOKEN}"
        }
      }
    }

    stage('Package') {
      steps {
        sh 'mvn -B -DskipTests=true package'
      }
    }

    stage('Archive') {
      steps {
        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
      }
    }

    // ‚úÖ NOUVEAU STAGE CD 1: Cr√©ation de l'image Docker
    stage('Build Docker Image') {
      steps {
        script {
          echo "üî® Construction de l'image Docker..."
          sh """
            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
            docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
          """
        }
      }
    }

    // ‚úÖ NOUVEAU STAGE CD 2: H√©bergement sur Docker Hub
    stage('Push to Docker Hub') {
      steps {
        script {
          echo "üì§ Pushing image to Docker Hub..."
          withCredentials([usernamePassword(
            credentialsId: 'dockerhub-credentials',
            usernameVariable: 'DOCKER_USERNAME',
            passwordVariable: 'DOCKER_PASSWORD'
          )]) {
            sh """
              docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
              docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
              docker push ${DOCKER_IMAGE}:latest
            """
          }
        }
      }
    }

    // ‚úÖ NOUVEAU STAGE CD 3: D√©ploiement Kubernetes
    stage('Deploy to Kubernetes') {
      steps {
        script {
          echo "üöÄ D√©ploiement sur Kubernetes..."
          
          // D√©ployer MySQL
          sh 'kubectl apply -f mysql-secrets.yml'
          sh 'kubectl apply -f mysql-deployment.yml'
          
          // Attendre que MySQL soit pr√™t
          sh '''
            kubectl wait --for=condition=ready pod -l app=mysql --timeout=300s
            sleep 10
          '''
          
          // D√©ployer l'application
          sh 'kubectl apply -f app-deployment.yml'
          
          // V√©rifier le d√©ploiement
          sh '''
            echo "=== V√©rification des d√©ploiements ==="
            kubectl get pods
            kubectl get services
            echo "=== Attente du d√©marrage de l'application ==="
            sleep 30
            kubectl logs -l app=tp-projet --tail=10
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Build et D√©ploiement termin√©s avec succ√®s !"
      echo "üåê Application accessible sur: http://192.168.49.2:30089/tpProjet"
      echo "üê≥ Image Docker: ${DOCKER_IMAGE}:${DOCKER_TAG}"
    }
    failure {
      echo "‚ùå Build ou D√©ploiement √©chou√©. V√©rifie les logs Jenkins."
    }
    always {
      // Nettoyage des credentials Docker
      sh 'docker logout'
    }
  }
}
